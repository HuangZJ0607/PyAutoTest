{"name": "test_tab_00002", "status": "broken", "statusDetails": {"message": "TypeError: exceptions must derive from BaseException", "trace": "self = <configparser.ConfigParser object at 0x00000287F33EE088>, section = 'url'\noption = 'bili_url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nE:\\python\\python\\lib\\configparser.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, OrderedDict([('api_url', 'http://39.98.138.157:5000/api/')]), OrderedDict())\nkey = 'bili_url'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\nE:\\python\\python\\lib\\collections\\__init__.py:916: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, OrderedDict([('api_url', 'http://39.98.138.157:5000/api/')]), OrderedDict())\nkey = 'bili_url'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'bili_url'\n\nE:\\python\\python\\lib\\collections\\__init__.py:908: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Config.config.Get_Config object at 0x00000287F33EEF48>, section = 'url'\noption = 'bili_url'\n\n    def get_config(self, section, option):\n        '''读取ini文件，并返回对应的option值\n        :param section: 对应的section\n        :param option:  对应的option\n        :return:    option的值\n        '''\n        try:\n>           op = self.cp.get(section, option)\n\nConfig\\config.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000287F33EE088>, section = 'url'\noption = 'bili_url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'bili_url' in section: 'url'\n\nE:\\python\\python\\lib\\configparser.py:791: NoOptionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase_UI_demo.Test_biTab testMethod=test_tab_00002>\n\n    def setUp(self) -> None:\n        self.driver = Driver('Chrome')\n>       self.driver.visit(Get_Config().get_config('url', 'bili_url'))\n\nTestcases\\TestCase_UI_demo.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Config.config.Get_Config object at 0x00000287F33EEF48>, section = 'url'\noption = 'bili_url'\n\n    def get_config(self, section, option):\n        '''读取ini文件，并返回对应的option值\n        :param section: 对应的section\n        :param option:  对应的option\n        :return:    option的值\n        '''\n        try:\n            op = self.cp.get(section, option)\n            return op\n        except Exception as error:\n>           raise ('文件读取错误', error)\nE           TypeError: exceptions must derive from BaseException\n\nConfig\\config.py:33: TypeError"}, "description": "test_tab_00002", "attachments": [{"name": "log", "source": "c63bee18-4ba1-4b36-9427-2ff98bcf6666-attachment.txt", "type": "text/plain"}], "start": 1593618757680, "stop": 1593618762660, "uuid": "a4d6ae96-1c44-4ab7-8fe8-d835795bbecf", "historyId": "ba6826dc7446e88c642fbb0f28febf5a", "testCaseId": "0e62666b3f3e3f9b5fa16d5ef6574c5a", "fullName": "Testcases.TestCase_UI_demo.Test_biTab#test_tab_00002", "labels": [{"name": "parentSuite", "value": "Testcases"}, {"name": "suite", "value": "TestCase_UI_demo"}, {"name": "subSuite", "value": "Test_biTab"}, {"name": "host", "value": "DESKTOP-OF3E6D7"}, {"name": "thread", "value": "1048-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Testcases.TestCase_UI_demo"}]}