{
  "uid" : "6689e3bb0a2cac86",
  "name" : "test_tab_00001",
  "fullName" : "Testcases.TestCase_UI_demo.Test_biTab#test_tab_00001",
  "historyId" : "a34887f597b080f8480a5bfe28692b6f",
  "time" : {
    "start" : 1593618752634,
    "stop" : 1593618757610,
    "duration" : 4976
  },
  "description" : "test_tab_00001",
  "descriptionHtml" : "<p>test_tab_00001</p>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: exceptions must derive from BaseException",
  "statusTrace" : "self = <configparser.ConfigParser object at 0x00000287F33E1F08>, section = 'url'\noption = 'bili_url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nE:\\python\\python\\lib\\configparser.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, OrderedDict([('api_url', 'http://39.98.138.157:5000/api/')]), OrderedDict())\nkey = 'bili_url'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\nE:\\python\\python\\lib\\collections\\__init__.py:916: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, OrderedDict([('api_url', 'http://39.98.138.157:5000/api/')]), OrderedDict())\nkey = 'bili_url'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'bili_url'\n\nE:\\python\\python\\lib\\collections\\__init__.py:908: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Config.config.Get_Config object at 0x00000287F33E1448>, section = 'url'\noption = 'bili_url'\n\n    def get_config(self, section, option):\n        '''读取ini文件，并返回对应的option值\n        :param section: 对应的section\n        :param option:  对应的option\n        :return:    option的值\n        '''\n        try:\n>           op = self.cp.get(section, option)\n\nConfig\\config.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000287F33E1F08>, section = 'url'\noption = 'bili_url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'bili_url' in section: 'url'\n\nE:\\python\\python\\lib\\configparser.py:791: NoOptionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase_UI_demo.Test_biTab testMethod=test_tab_00001>\n\n    def setUp(self) -> None:\n        self.driver = Driver('Chrome')\n>       self.driver.visit(Get_Config().get_config('url', 'bili_url'))\n\nTestcases\\TestCase_UI_demo.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Config.config.Get_Config object at 0x00000287F33E1448>, section = 'url'\noption = 'bili_url'\n\n    def get_config(self, section, option):\n        '''读取ini文件，并返回对应的option值\n        :param section: 对应的section\n        :param option:  对应的option\n        :return:    option的值\n        '''\n        try:\n            op = self.cp.get(section, option)\n            return op\n        except Exception as error:\n>           raise ('文件读取错误', error)\nE           TypeError: exceptions must derive from BaseException\n\nConfig\\config.py:33: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup",
    "time" : {
      "start" : 1593618752634,
      "stop" : 1593618752634,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "description" : "test_tab_00001",
    "status" : "broken",
    "statusMessage" : "TypeError: exceptions must derive from BaseException",
    "statusTrace" : "self = <configparser.ConfigParser object at 0x00000287F33E1F08>, section = 'url'\noption = 'bili_url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\nE:\\python\\python\\lib\\configparser.py:788: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, OrderedDict([('api_url', 'http://39.98.138.157:5000/api/')]), OrderedDict())\nkey = 'bili_url'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\nE:\\python\\python\\lib\\collections\\__init__.py:916: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, OrderedDict([('api_url', 'http://39.98.138.157:5000/api/')]), OrderedDict())\nkey = 'bili_url'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'bili_url'\n\nE:\\python\\python\\lib\\collections\\__init__.py:908: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Config.config.Get_Config object at 0x00000287F33E1448>, section = 'url'\noption = 'bili_url'\n\n    def get_config(self, section, option):\n        '''读取ini文件，并返回对应的option值\n        :param section: 对应的section\n        :param option:  对应的option\n        :return:    option的值\n        '''\n        try:\n>           op = self.cp.get(section, option)\n\nConfig\\config.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x00000287F33E1F08>, section = 'url'\noption = 'bili_url'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'bili_url' in section: 'url'\n\nE:\\python\\python\\lib\\configparser.py:791: NoOptionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase_UI_demo.Test_biTab testMethod=test_tab_00001>\n\n    def setUp(self) -> None:\n        self.driver = Driver('Chrome')\n>       self.driver.visit(Get_Config().get_config('url', 'bili_url'))\n\nTestcases\\TestCase_UI_demo.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Config.config.Get_Config object at 0x00000287F33E1448>, section = 'url'\noption = 'bili_url'\n\n    def get_config(self, section, option):\n        '''读取ini文件，并返回对应的option值\n        :param section: 对应的section\n        :param option:  对应的option\n        :return:    option的值\n        '''\n        try:\n            op = self.cp.get(section, option)\n            return op\n        except Exception as error:\n>           raise ('文件读取错误', error)\nE           TypeError: exceptions must derive from BaseException\n\nConfig\\config.py:33: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "3d3565126a2d8d93",
      "name" : "log",
      "source" : "3d3565126a2d8d93.txt",
      "type" : "text/plain",
      "size" : 60
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_UnitTestCase__pytest_class_setup::0",
    "time" : {
      "start" : 1593618766775,
      "stop" : 1593618766775,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "Testcases"
  }, {
    "name" : "suite",
    "value" : "TestCase_UI_demo"
  }, {
    "name" : "subSuite",
    "value" : "Test_biTab"
  }, {
    "name" : "host",
    "value" : "DESKTOP-OF3E6D7"
  }, {
    "name" : "thread",
    "value" : "1048-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Testcases.TestCase_UI_demo"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "6689e3bb0a2cac86.json",
  "parameterValues" : [ ]
}